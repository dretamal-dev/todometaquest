---
import { getOptimizedImage } from '../utils/imageUtils.js';
import Image3D from '../components/Image3D.astro';

const { item, align = false} = Astro.props;

let HtmlTag:any = 'div'; 

if (align === 'center' || align === 'right' || align === 'left') {
  HtmlTag = Image3D;
}

---

<HtmlTag align={align}>


  <div class="relative group w-[500px] flex flex-col items-center justify-center bg-gradient-to-b from-zinc-800 to-zinc-900 rounded-2xl overflow-hidden shadow-2xl">
    <div class="h-[300px] w-full relative p-4 flex flex-col justify-end">
      <div class="absolute top-0 left-0 h-full bg-cover bg-center w-full object-cover z-0 mask-b-from-20%" style={`background-image: url(${getOptimizedImage(item.data.img, 400)});`}></div>
      <h2 class="z-2 text-3xl mb-1 group-hover:animate-glitch">{item.data.title}</h2>
      <h3 class="text-lg italic">{item.data.caption}</h3>
      {item.data.precio && (
        <div class="z-2 text-6xl font-bold text-start px-3 py-1">{item.data.precio}</div>
      )}
    </div>
    <div class="p-4">
      <p class="text-zinc-300 text-sm text-pretty">{item.data.description}</p>
    </div>
    <div class="p-4 flex justify-start flex-col w-full">
      {item.data.pros && item.data.pros.length > 0 && (
        <>
        <span class="mb-1">✅ Pros:</span>
        <ul class="list-disc mb-4 ps-6">
          {item.data.pros.map((pro:string) => (
            <li class=" text-zinc-400 text-sm">{pro}</li>
          ))}
        </ul>
        </>
      )}
      
      {item.data.cons && item.data.cons.length > 0 && (
        <>
        <span class="mb-1">❌ Contras:</span>
        <ul class="list-disc mb-4 ps-6">
          {item.data.cons.map((con:string) => (
            <li class="text-zinc-400 text-sm">{con}</li>
          ))}
        </ul>
        </>
      )}

      {item.data.points && item.data.points.length > 0 && (
        <div class="mt-4 mb-2 flex justify-between align-middle gap-2">
          <ul class="w-1/2">
            {item.data.points.map((pointObj: { title: string, point: number }, idx: number) => (
              <li class="text-zinc-400 text-sm mb-2 flex flex-col gap-1">
                <div class="w-full h-6 bg-zinc-700 rounded flex items-center relative">
                  <div
                    class="h-6 bg-pink-800 rounded flex items-center px-2 text-xs font-semibold text-white absolute left-0 top-0"
                    style={`width: ${(Math.max(0, Math.min(10, pointObj.point)) / 10) * 100}%`}
                  >
                    <span style="text-wrap-mode: nowrap;">{pointObj.title}: {pointObj.point}/10</span>
                  </div>
                </div>
              </li>
            ))}
          </ul>
          <div class="w-1/2 text-center m-auto">
            {/* <span class="font-semibold">Puntuación:</span> */}
            <div class="flex gap-1 justify-center items-end">
              <span class="text-6xl text-zinc-100">
                {(
                  item.data.points.reduce((acc, p) => acc + (typeof p.point === 'number' ? p.point : 0), 0) /
                  (item.data.points.length || 1)
                ).toFixed(2)}
              </span>
              <span class="text-zinc-400">
                /10
              </span>
            </div>
          </div>
        </div>
      )}
      
      {item.data.refer && (
        <div class="mt-6 mb-2 flex justify-between align-middle gap-2">
          <a
            href={item.data.refer.link}
            target="_blank"
            rel="noopener noreferrer"
            class={`${item.data.refer.class} m-auto`}
            style="width: fit-content"
          >
            Comprar {item.data.title}<i></i>
          </a>
        </div>
      )}
      
    </div>
    <div class="p-4 flex justify-center flex-col w-full mb-4">
      <slot />
    </div>
  </div>


</HtmlTag>
