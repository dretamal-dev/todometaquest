---

const { item } = Astro.props;
const { data } = item; 
const { date, tags } = data;

function calculateReadTime(text:string) {
  const wordsPerMinute = 200;
  const words = text ? text.split(/\s+/).length : 0;
  return Math.max(1, Math.ceil(words / wordsPerMinute));
}

let newReadtime = 0;
if (item.data.readtime !== 0){
  newReadtime = calculateReadTime(item.body);
}

---
<div class="z-2">
  <div class="flex gap-4 z-2 text-white flex text-center justify-center items-center text-sm">

    {newReadtime !== 0 && (
      <div>
      <span>
        <svg class="w-full max-w-[20px] inline-block stroke-white me-1" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g stroke-width="0"></g><g stroke-linecap="round" stroke-linejoin="round"></g><g><path d="M12 7V12L14.5 10.5M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
        <span>{newReadtime} min de lectura</span>
      </span>
      </div>
    )}
    <div>
      <span>{new Date(date).toLocaleDateString('es-CL', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
    </div>
  </div>
  <div class="flex gap-4 mt-4">
    {tags && tags.map((tag:string) => (
      <span class="bg-white/20 rounded px-3 py-1 text-xs font-semibold text-white">{tag}</span>
    ))}
  </div>
</div> 